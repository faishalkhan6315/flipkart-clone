NODE_ENV=development
PORT=4000

# Database
MONGO_URI=mongodb://127.0.0.1:27017/flipkart

# Cloudinary
CLOUDINARY_NAME=your_cloud_name
CLOUDINARY_API_KEY=your_api_key
CLOUDINARY_API_SECRET=your_api_secret

# Razorpay
RAZORPAY_KEY_ID=your_razorpay_key_id
RAZORPAY_KEY_SECRET=your_razorpay_key_secret

# Email (choose one provider)
SMTP_MAIL=yourgmail@gmail.com
SMTP_PASSWORD=your_app_password   # use Gmail App Password, not your login

# OR SendGrid
SENDGRID_API_KEY=your_sendgrid_key
```

Notes:
- `backend/app.js` loads `backend/config/config.env` when not in production.
- JWT is hardcoded as `'secret'` in `middlewares/auth.js` and cookies use `cookieParser('secret')`. No `.env` key needed, but you may want to refactor later.

### Frontend API base URL
- File `frontend/src/urlconfig.js` currently points to Render: `https://flipkart-ru60.onrender.com/api/v1`.
- For local dev, change it to:
```
const baseurl="http://localhost:4000/api/v1";
export default baseurl;
```
- Alternatively keep it remote if your backend is deployed.

### Install and run (Windows cmd)
Run these from the project root `Flipkart-Clone`:

1) Backend
```
cd backend
npm install
```
Create `backend/config/config.env` as above.
Then:
```
<code_block_to_apply_changes_from>
```
- Starts on `http://localhost:4000`.
- Ensure MongoDB is reachable via `MONGO_URI`.

2) Frontend
Open a new terminal:
```
cd frontend
npm install
npm start
```
- CRA dev server runs on `http://localhost:3000`. `package.json` has `"proxy": "http://localhost:4000"` which helps for dev, but your code uses absolute URLs from `urlconfig.js`. Make sure `urlconfig.js` matches where backend runs.

### Things that can break and how to fix
- **Missing env vars**: Payment, email, and Cloudinary functions will fail if keys are empty. For dev, you can skip using those features or set test keys.
- **MongoDB connection**: `MONGO_URI` must be valid; otherwise server logs connection errors from `backend/config/database.js`.
- **CORS/cookies**: Backend enables `cors({credentials:true, origin:true})` and uses cookies for auth. When frontend URL differs from backend, ensure browser allows third‑party cookies. In dev (localhost:3000 -> 4000), this is same-site so it’s fine.
- **JWT secret hardcoded**: Works as-is. For production, move to env and rotate.
- **Email sending**: Uses Gmail service via `nodemailer`. Use a Gmail App Password. If not set, forgot password flows will error.
- **Razorpay**: Payments require valid test keys. Without them, payment routes will fail.

### Quick checklist
- Install Node.js and MongoDB.
- Create `backend/config/config.env` with keys.
- Update `frontend/src/urlconfig.js` to `http://localhost:4000/api/v1` for local.
- Run `npm install` in both `backend` and `frontend`.
- Start backend, then frontend.

If you want, I can update `frontend/src/urlconfig.js` for local dev and create a sample `backend/config/config.env` file for you.
